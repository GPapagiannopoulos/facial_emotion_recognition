import torch
import torch.nn as nn
from torchvision import transforms
from torchvision.io import read_image

# Paths 
model_path = "C:/Users/George/OneDrive/Documents/Coding Projects/MachineLearning/FER/Models/ResNetv1.0/model.pt"
image_path = r"C:\Users\George\OneDrive\Pictures\Camera Roll\WIN_20241108_12_03_57_Pro.jpg"

# Emotion array 
emotions = ["anger", "contempt", "disgust", "fear", "happy", "neutral", "sad", "surprise"]

# Device configuration 
if torch.cuda.is_available():
    device = 'cuda'
else:
    device = 'cpu'

# Defining the structure of the Residual Block  
class ResidualBlock(nn.Module):
    def __init__(self, input_channels, output_channels, stride = 1, downsample = None):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Sequential(
                     nn.Conv2d(input_channels, output_channels, kernel_size = 3, stride = stride, padding = 1),
                     nn.BatchNorm2d(output_channels),
                     nn.ReLU()
                     )
        self.conv2 = nn.Sequential(
                     nn.Conv2d(output_channels, output_channels, kernel_size = 3, stride = 1, padding = 1),
                     nn.BatchNorm2d(output_channels)
                     )
        self.downsample = downsample # a function to make sure the dimensions match so that the skip connection is possible 
        self.relu = nn.ReLU()
        self.output_channels = output_channels

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.conv2(out)
        if self.downsample:
            residual = self.downsample(x)
        out += residual 
        out = self.relu(out)

        return out 

# Defining our custom ResNet class 
class ResNet(nn.Module):
    def __init__(self, block, layers, num_classes = 8):
        super(ResNet, self).__init__()
        self.inplanes = 64
        self.conv1 = nn.Sequential(
                     nn.Conv2d(3, 64, kernel_size = 7, stride = 2, padding = 3),
                     nn.BatchNorm2d(64),
                     nn.ReLU()
                     )
        self.maxpool = nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1)
        self.layer0 = self.make_layer(block, 64, layers[0], stride = 1)
        self.layer1 = self.make_layer(block, 128, layers[1], stride = 2)
        self.layer2 = self.make_layer(block, 256, layers[2], stride = 2)
        self.layer3 = self.make_layer(block, 512, layers[3], stride = 2)
        self.avgpool = nn.AvgPool2d(7, stride = 1)
        self.fc = nn.Linear(512, num_classes)
    
    def make_layer(self, block, planes, blocks, stride = 1):
        downsample = None
        if stride != 1 or self.inplanes != planes:
            downsample = nn.Sequential(
                nn.Conv2d(self.inplanes, planes, kernel_size = 1, stride = stride),
                nn.BatchNorm2d(planes)
            )
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample))
        self.inplanes = planes 
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes))
        
        return nn.Sequential(*layers)
    
    def forward(self, x):
        x = self.conv1(x)
        x = self.maxpool(x)
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)

        x = self.avgpool(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)

        return x


# Creating our transformation function to turn our images into valid input 
mean = [136.0891/255.0, 110.6775/255.0,  98.6695/255.0]
std = [66.0843/255.0, 60.0459/255.0, 58.1655/255.0]

normalize = transforms.Normalize(mean=mean, std = std)
transform = transforms.Compose([
    transforms.Resize((224,224)),
    normalize
])

# Loading in the model and preparing it for inference 
def load_model(model_path):
    # Load model 
    model = torch.load(model_path, weights_only=False)
    # Assign model to configured device 
    model.to(device)
    # Turn on evaluation mode  
    model.eval()

    return model 

# Image preprocessing 
def prepare_image(image_path):
    # Load the image 
    image = read_image(image_path).type(torch.float32)
    # Transform the image into valid input 
    image = transform(image).to(device)
    # Unsqueeze the image to account for individual image input rather than batches 
    image = image.unsqueeze(0)
    
    return image 

# Predict image 
def predict_image(model_path, image_path):
    
    model = load_model(model_path)
    
    image = prepare_image(image_path)

    prediction = model(image).flatten().tolist()

    pred_emotion = [(x, round(i, 3)) for x, i in zip(emotions, prediction) if i >= 3]
    if not pred_emotion:
        pred_emotion = ("uncertain", 0.00)
    return pred_emotion

prediction = predict_image(model_path, image_path)
print(prediction)