import torch
import cv2
import numpy as np
import gc 
from mss import mss
import time 
import torch.nn as nn
from torchvision.transforms import v2 
from torchvision.io import read_image

# Paths 
model_path = "C:/Users/George/OneDrive/Documents/Coding Projects/MachineLearning/FER/Models/ResNetv1.2/model.pt"
image_path = r"C:\Users\George\OneDrive\Pictures\George.Papagiannopoulos.jpg"
yunet_path = "C:/Users/George/Downloads/yunet_n_640_640.onnx"

# YuNet initialization
detector = cv2.FaceDetectorYN.create(yunet_path, "", (640,640))

# Emotion array 
emotions = ["anger", "contempt", "disgust", "fear", "happy", "neutral", "sad", "surprise"]

# Device configuration 
if torch.cuda.is_available():
    device = 'cuda'
else:
    device = 'cpu'

# Defining the structure of the Residual Block  
class ResidualBlock(nn.Module):
    def __init__(self, input_channels, output_channels, stride = 1, downsample = None):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Sequential(
                     nn.Conv2d(input_channels, output_channels, kernel_size = 3, stride = stride, padding = 1),
                     nn.BatchNorm2d(output_channels),
                     nn.ReLU()
                     )
        self.conv2 = nn.Sequential(
                     nn.Conv2d(output_channels, output_channels, kernel_size = 3, stride = 1, padding = 1),
                     nn.BatchNorm2d(output_channels)
                     )
        self.downsample = downsample # a function to make sure the dimensions match so that the skip connection is possible 
        self.relu = nn.ReLU()
        self.output_channels = output_channels

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.conv2(out)
        if self.downsample:
            residual = self.downsample(x)
        out += residual 
        out = self.relu(out)

        return out 

# Defining our custom ResNet class 
class ResNet(nn.Module):
    def __init__(self, block, layers, num_classes = 8):
        super(ResNet, self).__init__()
        self.inplanes = 64
        self.conv1 = nn.Sequential(
                     nn.Conv2d(3, 64, kernel_size = 7, stride = 2, padding = 3),
                     nn.BatchNorm2d(64),
                     nn.ReLU()
                     )
        self.maxpool = nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1)
        self.layer0 = self.make_layer(block, 64, layers[0], stride = 1)
        self.layer1 = self.make_layer(block, 128, layers[1], stride = 2)
        self.layer2 = self.make_layer(block, 256, layers[2], stride = 2)
        self.layer3 = self.make_layer(block, 512, layers[3], stride = 2)
        self.avgpool = nn.AvgPool2d(7, stride = 1)
        self.fc = nn.Linear(512, num_classes)
    
    def make_layer(self, block, planes, blocks, stride = 1):
        downsample = None
        if stride != 1 or self.inplanes != planes:
            downsample = nn.Sequential(
                nn.Conv2d(self.inplanes, planes, kernel_size = 1, stride = stride),
                nn.BatchNorm2d(planes)
            )
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample))
        self.inplanes = planes 
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes))
        
        return nn.Sequential(*layers)
    
    def forward(self, x):
        x = self.conv1(x)
        x = self.maxpool(x)
        x = self.layer0(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)

        x = self.avgpool(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)

        return x


# Creating our transformation function to turn our images into valid input 
mean = [136.0891, 110.6775,  98.6695]
std = [66.0843, 60.0459, 58.1655]

normalize = v2.Normalize(mean=mean, std = std)
transform = v2.Compose([
    v2.ToImage(),
    v2.ToDtype(torch.float32, scale=True),
    v2.Resize((224,224)),
    #normalize
])

# Loading in the model and preparing it for inference 
def load_model(model_path):
    # Load model 
    model = torch.load(model_path, weights_only=False)
    # Assign model to configured device 
    model.to(device)
    # Turn on evaluation mode  
    model.eval()

    return model 

# Instantiate our model 
resnet = load_model(model_path)

# Image preprocessing 
def prepare_image(image):
    # Load the image 
    #image = read_image(image_path).type(torch.float32)
    # Transform the image into valid input 
    image = transform(image)
    # Unsqueeze the image to account for individual image input rather than batches 
    image = image.unsqueeze(0).to(device)
    
    return image 

# Number of emotions you wish to display 
emotionsDisplayed = 1
# Threshold for displaying an emotion 
certainty = 2.0

# Predict image 
def predict_image(model, image):
    with torch.no_grad():
        prediction = model(image).flatten().tolist()

    pred_emotion = sorted([(x, round(i, 3)) for x, i in zip(emotions, prediction) if i >= certainty], key = lambda x: x[1], reverse=True)
    if not pred_emotion:
        pred_emotion = [("uncertain", 0.00) * emotionsDisplayed]
    
    torch.cuda.empty_cache()
    gc.collect()

    return pred_emotion[:1]

# Initialize the video capture 
cam = cv2.VideoCapture(0)

# Get the window dimensions 
frame_width = int(cam.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cam.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Initialize the last known face location 
last_known = (0,0,0,0)

# Start execution timer
timer = time.perf_counter()

# Loop for detecting the face
while True:
    ret, img = cam.read()
    detector.setInputSize((frame_width, frame_height))
    _, faces = detector.detect(img)
    
    if faces is not None:
        for face in faces:
            box = list(map(int, face[:4]))
            cv2.rectangle(img, box, (0, 0, 255), 5)
            last_known = box
            crop = img[box[1]: box[1] + box[3], box[0]: box[0] + box[2]]
            crop = cv2.cvtColor(crop, cv2.COLOR_RGB2BGR)
            crop = np.swapaxes(np.swapaxes(crop, 1, 2),0, 1)
            crop = torch.from_numpy(crop)
            crop = transform(crop).unsqueeze(0).to(device)
            try:
                prediction = predict_image(resnet, crop)
                cv2.putText(img, str(prediction), (last_known[0], last_known[1]), fontFace = cv2.FONT_HERSHEY_SIMPLEX, fontScale = 1, color = (0,0,255), thickness=1, lineType=2)
            except:
                continue
    else:
        cv2.rectangle(img, last_known, (0, 0, 255), 5)

    cv2.imshow('faces', img)

    k = cv2.waitKey(30) & 0xff
    if k== 27:
        break

cv2.destroyAllWindows()
